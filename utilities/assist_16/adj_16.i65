; Macros to adjust (addto/subtract from) 16-bit values.

.ifndef assist_adj_16_included
assist_adj_16_included = 1

.macro _adj_var_16 var,step
  .local no_carry
  .ifconst step                        ; Is step resolved at assembly time?
    .if step                           ; This is not a case of adding 0? Right?
      clc
    .endif

    .if .lobyte(step)                  ; Do we need to process the low byte?
      lda var
      adc #.lobyte(step)
      sta var
    .endif

    .if .hibyte(step)                  ; Do we need to process the high byte?
      lda var+1
      adc #.hibyte(step)
      sta var+1
    .elseif .lobyte(step)              ; or pass low byte carry if it exists.
      bcc no_carry
      inc var+1
    .endif

  .else                                ; No, we need to add both bytes.
    clc
    lda var
    adc #.lobyte(step)
    sta var
    lda var+1
    adc #.hibyte(step)
    sta var+1
  .endif
no_carry:
.endmacro

.macro _adj_vax_16 var,step
  .local no_carry
  .ifconst step                        ; Is step resolved at assembly time?
    .if step                           ; This is not a case of adding 0? Right?
      clc
    .endif

    .if .lobyte(step)                  ; Do we need to process the low byte?
      lda var,x
      adc #.lobyte(step)
      sta var,x
    .endif

    .if .hibyte(step)                  ; Do we need to process the high byte?
      lda var+1,x
      adc #.hibyte(step)
      sta var+1,x
    .elseif .lobyte(step)              ; or pass low byte carry if it exists.
      bcc no_carry
      inc var+1,x
    .endif

  .else                                ; No, we need to add both bytes.
    clc
    lda var,x
    adc #.lobyte(step)
    sta var,x
    lda var+1,x
    adc #.hibyte(step)
    sta var+1,x
  .endif
no_carry:
.endmacro

.macro _adj_vay_16 var,step
  .local no_carry
  .ifconst step                        ; Is step resolved at assembly time?
    .if step                           ; This is not a case of adding 0? Right?
      clc
    .endif

    .if .lobyte(step)                  ; Do we need to process the low byte?
      lda var,y
      adc #.lobyte(step)
      sta var,y
    .endif

    .if step                           ; Do we need to process the high byte?
      lda var+1,y
      adc #.hibyte(step)
      sta var+1,y
    .endif

  .else                                ; No, we need to add both bytes.
    clc
    lda var,y
    adc #.lobyte(step)
    sta var,y
    lda var+1,y
    adc #.hibyte(step)
    sta var+1,y
  .endif
no_carry:
.endmacro

.macro _adj_zpp_16 var,step
  .local no_carry
  .ifconst step                        ; Is step resolved at assembly time?
    .if step                           ; This is not a case of adding 0? Right?
      clc
    .endif

    .if .lobyte(step)                  ; Do we need to process the low byte?
      lda (var)
      adc #.lobyte(step)
      sta (var)
    .endif

    .if .hibyte(step)                  ; Do we need to process the high byte?
      ldy #1
      lda (var),y
      adc #.hibyte(step)
      sta (var),y
    .elseif .lobyte(step)              ; or pass low byte carry if it exists.
      bcc no_carry
      ldy #1
      lda (var),y
      inc
      sta (var),y
    .endif

  .else                                ; No, we need to add both bytes.
    clc
    lda (var)
    adc #.lobyte(step)
    sta (var)
    ldy #1
    lda (var),y
    adc #.hibyte(step)
    sta (var),y
  .endif
no_carry:
.endmacro

.macro _adj_zpy_16 var,step
  .local no_carry
  .ifconst step                        ; Is step resolved at assembly time?
    .if step                           ; This is not a case of adding 0? Right?
      clc
    .endif

    .if .lobyte(step)                  ; Do we need to process the low byte?
      lda (var),y
      adc #.lobyte(step)
      sta (var),y
    .endif

    .if .hibyte(step)                  ; Do we need to process the high byte?
      iny
      lda (var),y
      adc #.hibyte(step)
      sta (var),y
      dey
    .elseif .lobyte(step)              ; or pass low byte carry if it exists.
      bcc no_carry
      iny
      lda (var),y
      inc
      sta (var),y
      dey
    .endif

  .else                                ; No, we need to add both bytes.
    clc
    lda (var),y
    adc #.lobyte(step)
    sta (var),y
    iny
    lda (var),y
    adc #.hibyte(step)
    sta (var),y
    dey
  .endif
no_carry:
.endmacro

; adj_16
; Adjust a 16 bit variable in memory by a literal amount.
; Parameters:
;   var - a 16 bit variable.
;   step - an integer constant to be added to var.
; Notes:
;   zp, abs : Clobbers the A register, C, V, Z and N flags.
;   zpi     : Clobbers the A and Y registers, C, V, Z and N flags.
;   zpy     : Clobbers the A register, C, V, Z and N flags.
;   zx, abx : Clobbers the A register, C, V, Z and N flags.
;   zy, aby : Clobbers the A register, C, V, Z and N flags.
;
; Optimized for special cases like a step of 0, 1..255, $100..$FF00
.macro adj_16 dst,value
  .if (.match({dst}, {(name)}))
    _adj_zpp_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {(name),y}))
    _adj_zpy_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {name,x}))
    _adj_vax_16 .mid(0, 1, {dst}),value
  .elseif (.match({dst}, {name,y}))
    _adj_vay_16 .mid(0, 1, {dst}),value
  .else
    _adj_var_16 {dst},value
  .endif
.endmacro

.endif
