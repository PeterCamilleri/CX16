; Macros to test if a 16-bit variable is greater or equal to a value.

.ifndef assist_gte_16_included
assist_gte_16_included = 1

.macro _gte_var_16 var, value
  sec

  .if (!.const(value))||.lobyte(value) ; Do we need to do all the work?
    lda var                            ; Get the low byte
    sbc #.lobyte(value)                ; Subtract it.
  .endif

  lda var+1
  sbc #.hibyte(value)
.endmacro

.macro _gte_vax_16 var, value
  sec

  .if (!.const(value))||.lobyte(value) ; Do we need to do all the work?
    lda var,x                          ; Get the low byte
    sbc #.lobyte(value)                ; Subtract it.
  .endif

  lda var+1,x
  sbc #.hibyte(value)
.endmacro

.macro _gte_vay_16 var, value
  sec

  .if (!.const(value))||.lobyte(value) ; Do we need to do all the work?
    lda var,y                          ; Get the low byte
    sbc #.lobyte(value)                ; Subtract it.
  .endif

  lda var+1,y
  sbc #.hibyte(value)
.endmacro

.macro _gte_zpp_16 var, value
  sec

  .if (!.const(value))||.lobyte(value) ; Do we need to do all the work?
    lda (var)                          ; Yes; Get the low byte and
    sbc #.lobyte(value)                ; subtract from it.
  .endif

  ldy #1
  lda (var),y
  sbc #.hibyte(value)
.endmacro

.macro _gte_zpy_16 var, value
  sec                                  ; Before subtract, always set carry.

  .if (!.const(value))||.lobyte(value) ; Do we need to do all the work?
    lda (var),y                        ; Get the low byte
    sbc #.lobyte(value)                ; Subtract it.
  .endif

  iny
  lda (var),y                          ; Subtract the high byte.
  dey
  sbc #.hibyte(value)
.endmacro

; gte_16
; Compare a 16 bit variable in memory with a value to see if it is greater or equal.
; Parameters:
;   var - a 16 bit variable.
;   value - an integer value to compare var with.
; Returns:
;   C is set if var >= value using unsigned comparison.
;   (N xor V) is cleared if var >= value using signed comparison.
; Notes:
;   zp, abs : Clobbers the A register and Z flag.
;   zpi     : Clobbers the A and Y registers, and Z flag.
;   zpy     : Clobbers the A register, and Z flag.
;   zx, abx : Clobbers the A register and Z flag.
;   zy, aby : Clobbers the A register and Z flag.
;
;   Optimized for special cases like values of $xx00.
.macro gte_16 dst,value
  .if (.match({dst}, {(name)}))
    _gte_zpp_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {(name),y}))
    _gte_zpy_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {name,x}))
    _gte_vax_16 .mid(0, 1, {dst}),value
  .elseif (.match({dst}, {name,y}))
    _gte_vay_16 .mid(0, 1, {dst}),value
  .else
    _gte_var_16 {dst},value
  .endif
.endmacro

.endif
