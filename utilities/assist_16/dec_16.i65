; Macros to increment 16-bit values.

.ifndef assist_dec_16_included
assist_dec_16_included = 1

.macro _dec_var_16 var
  .local no_wrap
  lda var
  bne no_wrap
  dec var+1
no_wrap:
  dec var
.endmacro

.macro _dec_vax_16 var
  .local no_wrap
  lda var,x
  bne no_wrap
  dec var+1,x
no_wrap:
  dec var,x
.endmacro

.macro _dec_vay_16 var
  .local no_wrap
  lda var,y
  bne no_wrap
  lda var+1,y
  dec
  sta var+1,y
  lda var,y
no_wrap:
  dec
  sta var,y
.endmacro

.macro _dec_zpp_16 var
  .local no_wrap
  lda (var)
  bne no_wrap
  ldy #1
  lda (var),y
  dec
  sta (var),y
  lda (var)
no_wrap:
  dec
  sta (var)
.endmacro

.macro _dec_zpy_16 var
  .local no_wrap
  lda (var),y
  bne no_wrap
  iny
  lda (var),y
  dec
  sta (var),y
  dey
  lda (var),y
no_wrap:
  dec
  sta (var),y
.endmacro

; dec_16
; Decrement a 16 bit variable in memory.
; Parameters:
;   var - a 16 bit variable.
; Notes:
;   zp, abs : Clobbers the A register, Z and N flags.
;   zpi     : Clobbers the A and Y register, Z and N flags.
;   zpy     : Clobbers the A register and the Z and N flags.
;   zx, abx : Clobbers the A register, Z and N flags.
;   zy, aby : Clobbers the A register, Z and N flags.
;
.macro dec_16 dst
  .if (.match({dst}, {(name)}))
    _dec_zpp_16 .mid(1, 1, {dst})
  .elseif (.match({dst}, {(name),y}))
    _dec_zpy_16 .mid(1, 1, {dst})
  .elseif (.match({dst}, {name,x}))
    _dec_vax_16 .mid(0, 1, {dst})
  .elseif (.match({dst}, {name,y}))
    _dec_vay_16 .mid(0, 1, {dst})
  .else
    _dec_var_16 {dst}
  .endif
.endmacro


.endif
