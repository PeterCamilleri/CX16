; Macros to increment 16-bit values.

.ifndef assist_dec_16_included
assist_dec_16_included = 1

.macro _dec_var_16 var
  .local no_wrap
  lda var
  bne no_wrap
  dec var+1
no_wrap:
  dec var
.endmacro

.macro _dec_zpp_16 zpp
  .local no_wrap
  sec
  lda (zpp)
  sbc #$01
  sta (zpp)  
  bcs no_wrap
  ldy #1
  lda (zpp),y
  dec
  sta (zpp),y
no_wrap:
.endmacro

.macro _dec_zpy_16 zpy
  .local no_wrap
  sec
  lda (zpy),y
  sbc #$01
  sta (zpy),y
  bcs no_wrap
  iny
  lda (zpy),y
  dec
  sta (zpy),y
  dey
no_wrap:
.endmacro

; dec_16
; Decrement a 16 bit variable in memory.
; Parameters:
;   var - a 16 bit variable.
; Notes:
;   zp, abs : Clobbers the A register, Z and N flags.
;   zpi     : Clobbers the A and Y register, Z and N flags.
;   zpy     : Clobbers the A register and the Z and N flags.
.macro dec_16 dst
  .if (.match({dst}, {(name)}))
    _dec_zpp_16 .mid(1, 1, {dst})
  .elseif (.match({dst}, {(name),y}))
    _dec_zpy_16 .mid(1, 1, {dst})
  .else
    _dec_var_16 {dst}
  .endif
.endmacro


.endif
