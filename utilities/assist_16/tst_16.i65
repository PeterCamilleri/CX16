; tst_16
; Test a 16 bit variable in memory.
; Parameters:
;   var - a 16 bit variable.
; Returns:
;   The N and Z flags are set according to the value tested.
; Notes:
;   zp, abs : Clobbers the A register.
;   zpi     : Clobbers the A and Y registers.
;   zpy     : Clobbers the A register.
;   zx, abx : Clobbers the A register.
;   zy, aby : Clobbers the A register.

.ifndef assist_tst_16_included
assist_tst_16_included = 1

.macro _tst_var_16 var
  .local all_done
  lda var+1                            ; Get the high byte and test it.
  bmi all_done
  ora var                              ; Merge in the low byte.
  bpl all_done
  lsr                                  ; Deal with false negatives.
all_done:
.endmacro

.macro _tst_vax_16 var
  .local all_done
  lda var+1,x                          ; Get the high byte and test it.
  bmi all_done
  ora var,x                            ; Merge in the low byte.
  bpl all_done
  lsr                                  ; Deal with false negatives.
all_done:
.endmacro

.macro _tst_vay_16 var
  .local all_done
  lda var+1,y                          ; Get the high byte and test it.
  bmi all_done
  ora var,y                            ; Merge in the low byte.
  bpl all_done
  lsr                                  ; Deal with false negatives.
all_done:
.endmacro

.macro _tst_zpp_16 var
  .local all_done
  ldy #1
  lda (var),y                          ; Get the high byte and test it.
  bmi all_done
  ora (var)                            ; Merge in the low byte.
  bpl all_done
  lsr                                  ; Deal with false negatives.
all_done:
.endmacro

.macro _tst_zpy_16 var
  .local all_done
  iny                                  ; Get the high byte
  lda (var),y
  dey
  ora #0                               ; Test it.
  bmi all_done
  ora (var),y                          ; Merge in the low byte.
  bpl all_done
  lsr                                  ; Deal with false negatives.
all_done:
.endmacro

.macro tst_16 dst
  .if (.match({dst}, {(name)}))
    _tst_zpp_16 .mid(1, 1, {dst})
  .elseif (.match({dst}, {(name),y}))
    _tst_zpy_16 .mid(1, 1, {dst})
  .elseif (.match({dst}, {name,x}))
    _tst_vax_16 .mid(0, 1, {dst})
  .elseif (.match({dst}, {name,y}))
    _tst_vay_16 .mid(0, 1, {dst})
  .else
    _tst_var_16 {dst}
  .endif
.endmacro

.endif
