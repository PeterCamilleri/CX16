; Macros to initialize (set) 16-bit values.

.ifndef assist_set_16_included
assist_set_16_included = 1

.macro _set_var_16 var,value
  .ifconst value                       ; Is value resolved at assembly time?
    .if .lobyte(value)                 ; Do we need to copy the low byte?
      lda #.lobyte(value)
      sta var
    .else                              ; Or can we just zap it?
      stz var
    .endif

    .if .hibyte(value)                 ; Do we need to copy the high byte?
      lda #.hibyte(value)
      sta var+1
    .else                              ; Or can we just zap it too?
      stz var+1
    .endif

  .else                                ; We need to copy both bytes.
    lda #.lobyte(value)
    sta var
    lda #.hibyte(value)
    sta var+1
  .endif
.endmacro

.macro _set_vax_16 var,value
  .ifconst value                       ; Is value resolved at assembly time?
    .if .lobyte(value)                 ; Do we need to copy the low byte?
      lda #.lobyte(value)
      sta var,x
    .else                              ; Or can we just zap it?
      stz var,x
    .endif

    .if .hibyte(value)                 ; Do we need to copy the high byte?
      lda #.hibyte(value)
      sta var+1,x
    .else                              ; Or can we just zap it too?
      stz var+1,x
    .endif

  .else                                ; We need to copy both bytes.
    lda #.lobyte(value)
    sta var,x
    lda #.hibyte(value)
    sta var+1,x
  .endif
.endmacro

.macro _set_vay_16 var,value
  lda #.lobyte(value)
  sta var,y
  lda #.hibyte(value)
  sta var+1,y
.endmacro

.macro _set_zpp_16 zpp,value
  lda #.lobyte(value)
  sta (zpp)
  ldy #1
  lda #.hibyte(value)
  sta (zpp),y
.endmacro

.macro _set_zpy_16 zpy,value
  lda #.lobyte(value)
  sta (zpy),y
  iny
  lda #.hibyte(value)
  sta (zpy),y
  dey
.endmacro

; set_16
; Initialize a 16 bit variable in memory.
; Parameters:
;   var - a 16 bit variable.
; value - a value used to initialize var.
; Notes:
;   zp, abs : Unless value is 0, clobbers the A register, Z and N flags.
;   zpi     : Clobbers the A and Y registers, Z and N flags.
;   zpy     : Clobbers the A register, Z and N flags.
;   zx, abx : Unless value is 0, clobbers the A register, Z and N flags.
;   zy, aby : Clobbers the A register, Z and N flags.
;
;   Optimized for special cases like 0, 1..255, $100..$FF00
.macro set_16 dst,value
  .if (.match({dst}, {(name)}))
    _set_zpp_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {(name),y}))
    _set_zpy_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {name,x}))
    _set_vax_16 .mid(0, 1, {dst}),value
  .elseif (.match({dst}, {name,y}))
    _set_vay_16 .mid(0, 1, {dst}),value
  .else
    _set_var_16 {dst},value
  .endif
.endmacro

.endif
