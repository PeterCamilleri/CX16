; Macros to increment 16-bit values.

.ifndef assist_inc_16_included
assist_inc_16_included = 1

.macro _inc_var_16 var
  .local no_wrap
  inc var
  bne no_wrap
  inc var+1
no_wrap:
.endmacro

.macro _inc_zpp_16 zpp
  .local no_wrap
  lda (zpp)
  inc
  sta (zpp)
  bne no_wrap
  ldy #1
  lda (zpp),y
  inc
  sta (zpp),y
no_wrap:
.endmacro

.macro _inc_zpy_16 zpy
  .local no_wrap
  lda (zpy),y
  inc
  sta (zpy),y
  bne no_wrap
  iny
  lda (zpy),y
  inc
  sta (zpy),y
  dey
no_wrap:
.endmacro

; inc_16
; Increment a 16 bit variable in memory.
; Parameters:
;   var - a 16 bit variable.
; Notes:
;   zp, abs : Clobbers the Z and N flags.
;   zpi     : Clobbers the A and Y register, Z and N flags.
;   zpy     : Clobbers the A register and the Z and N flags.
.macro inc_16 dst
  .if (.match({dst}, {(name)}))
    _inc_zpp_16 .mid(1, 1, {dst})
  .elseif (.match({dst}, {(name),y}))
    _inc_zpy_16 .mid(1, 1, {dst})
  .else
    _inc_var_16 {dst}
  .endif
.endmacro

.endif
