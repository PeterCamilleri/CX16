; eql_16
; Compare a 16 bit variable in memory with a value to see if they are equal.
; Parameters:
;   var - a 16 bit variable.
;   value - an integer value to compare var with.
; Returns:
;   The Z flag is set if var equals value.
; Notes:
;   zp, abs : Clobbers the A register, C, V, and N flags.
;   zpi     : Clobbers the A and Y registers, C, V, and N flags.
;   zpy     : Clobbers the A register, C, V, and N flags.
;   zx, abx : Clobbers the A register, C, V, and N flags.
;   zy, aby : Clobbers the A register, C, V, and N flags.
;
;   Optimized for special cases like values of 0, $00xx, $xx00.

.ifndef assist_eql_16_included
assist_eql_16_included = 1

.macro _eql_var_16 var, value
  .local not_equal
  .ifconst value                       ; Is value resolved at assembly time?
    .if value                          ; Is value non-zero?
      lda var

      .if .lobyte(value)               ; Is value low byte non-zero?
        cmp #.lobyte(value)
      .endif

      bne not_equal
      lda var+1

      .if .hibyte(value)               ; Is value high byte non-zero?
        cmp #.hibyte(value)
      .endif

    .else                              ; No, comparing with zero.
      lda var
      ora var+1
    .endif

  .else                                ; No, we need to compare both bytes.
    lda var
    cmp #.lobyte(value)
    bne not_equal
    lda var+1
    cmp #.hibyte(value)
  .endif

not_equal:
.endmacro

.macro _eql_vax_16 var, value
  .local not_equal
  .ifconst value                       ; Is value resolved at assembly time?
    .if value                          ; Is value non-zero?
      lda var,x

      .if .lobyte(value)               ; Is value low byte non-zero?
        cmp #.lobyte(value)
      .endif

      bne not_equal
      lda var+1,x

      .if .hibyte(value)               ; Is value high byte non-zero?
        cmp #.hibyte(value)
      .endif

    .else                              ; No, comparing with zero.
      lda var,x
      ora var+1,x
    .endif

  .else                                ; No, we need to compare both bytes.
    lda var,x
    cmp #.lobyte(value)
    bne not_equal
    lda var+1,x
    cmp #.hibyte(value)
  .endif

not_equal:
.endmacro

.macro _eql_vay_16 var, value
  .local not_equal
  .ifconst value                       ; Is value resolved at assembly time?
    .if value                          ; Is value non-zero?
      lda var,y

      .if .lobyte(value)               ; Is value low byte non-zero?
        cmp #.lobyte(value)
      .endif

      bne not_equal
      lda var+1,y

      .if .hibyte(value)               ; Is value high byte non-zero?
        cmp #.hibyte(value)
      .endif

    .else                              ; No, comparing with zero.
      lda var,y
      ora var+1,y
    .endif

  .else                                ; No, we need to compare both bytes.
    lda var,y
    cmp #.lobyte(value)
    bne not_equal
    lda var+1,y
    cmp #.hibyte(value)
  .endif

not_equal:
.endmacro

.macro _eql_zpp_16 var, value
  .local not_equal
  .ifconst value                       ; Is value resolved at assembly time?
    .if value                          ; Is value non-zero?
      lda (var)

      .if .lobyte(value)               ; Is value low byte non-zero?
        cmp #.lobyte(value)
      .endif

      bne not_equal
      ldy #1
      lda (var),y

      .if .hibyte(value)               ; Is value high byte non-zero?
        cmp #.hibyte(value)
      .endif

    .else                              ; No, comparing with zero.
      lda (var)
      ldy #1
      ora (var),y
    .endif

  .else                                ; No, we need to compare both bytes.
    lda (var)
    cmp #.lobyte(value)
    bne not_equal
    ldy #1
    lda (var),y
    cmp #.hibyte(value)
  .endif

not_equal:
.endmacro

.macro _eql_zpy_16 var, value
  .local not_equal
  .ifconst value                       ; Is value resolved at assembly time?
    .if value                          ; Is value non-zero?
      lda (var),y

      .if .lobyte(value)               ; Is value low byte non-zero?
        cmp #.lobyte(value)
      .endif

      bne not_equal
      iny
      lda (var),y
      dey
      cmp #.hibyte(value)

    .else                              ; No, comparing with zero.
      iny
      lda (var),y
      dey
      ora (var),y
    .endif

  .else                                ; No, we need to compare both bytes.
    iny
    lda (var),y
    dey
    cmp #.hibyte(value)
    bne not_equal
    lda (var),y
    cmp #.lobyte(value)
  .endif

not_equal:
.endmacro

.macro eql_16 dst,value
  .if (.match({dst}, {(name)}))
    _eql_zpp_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {(name),y}))
    _eql_zpy_16 .mid(1, 1, {dst}),value
  .elseif (.match({dst}, {name,x}))
    _eql_vax_16 .mid(0, 1, {dst}),value
  .elseif (.match({dst}, {name,y}))
    _eql_vay_16 .mid(0, 1, {dst}),value
  .else
    _eql_var_16 {dst},value
  .endif
.endmacro

.endif
