; SWEET-16 - The APPLE-II Pseudo Machine Interpreter - Header File
; Copyright (C) 1977 APPLE COMPUTER, INC -- All  Rights Reserved
; S. WOZNIAK
; Original code courtesy of: http://www.6502.org/source/interpreters/sweet16.htm
; Ported to ca65 for the Commander X 16 project by Peter Camilleri

.ifndef sweet_16_included
sweet_16_included = 1
  .ifndef CPU_ISET_SWEET16
    .macpack cpu
  .endif

  ; Definitions for users of sweet_16.i65.
  .importzp sw16_regs
  .import sw16

  ; Register definitions
  r_0 = 0
  sw16_r0   = sw16_regs + $00
  sw16_r0l  = sw16_regs + $00
  sw16_r0h  = sw16_regs + $01

  r_1 = 1
  sw16_r1   = sw16_regs + $02
  sw16_r1l  = sw16_regs + $02
  sw16_r1h  = sw16_regs + $03

  r_2 = 2
  sw16_r2   = sw16_regs + $04
  sw16_r2l  = sw16_regs + $04
  sw16_r2h  = sw16_regs + $05

  r_3 = 3
  sw16_r3   = sw16_regs + $06
  sw16_r3l  = sw16_regs + $06
  sw16_r3h  = sw16_regs + $07

  r_4 = 4
  sw16_r4   = sw16_regs + $08
  sw16_r4l  = sw16_regs + $08
  sw16_r4h  = sw16_regs + $09

  r_5 = 5
  sw16_r5   = sw16_regs + $0A
  sw16_r5l  = sw16_regs + $0A
  sw16_r5h  = sw16_regs + $0B

  r_6 = 6
  sw16_r6   = sw16_regs + $0C
  sw16_r6l  = sw16_regs + $0C
  sw16_r6h  = sw16_regs + $0D

  r_7 = 7
  sw16_r7   = sw16_regs + $0E
  sw16_r7l  = sw16_regs + $0E
  sw16_r7h  = sw16_regs + $0F

  r_8 = 8
  sw16_r8   = sw16_regs + $10
  sw16_r8l  = sw16_regs + $10
  sw16_r8h  = sw16_regs + $11

  r_9 = 9
  sw16_r9   = sw16_regs + $12
  sw16_r9l  = sw16_regs + $12
  sw16_r9h  = sw16_regs + $13

  r_10 = 10
  sw16_r10  = sw16_regs + $14
  sw16_r10l = sw16_regs + $14
  sw16_r10h = sw16_regs + $15

  r_11 = 11
  sw16_r11  = sw16_regs + $16
  sw16_r11l = sw16_regs + $16
  sw16_r11h = sw16_regs + $17

  r_12 = 12
  sw16_r12  = sw16_regs + $18
  sw16_r12l = sw16_regs + $18
  sw16_r12h = sw16_regs + $19
  sw16_r12_offset = 12*2

  r_13 = 13
  sw16_r13  = sw16_regs + $1A
  sw16_r13l = sw16_regs + $1A
  sw16_r13h = sw16_regs + $1B

  r_14 = 14
  sw16_r14  = sw16_regs + $1C
  sw16_r14l = sw16_regs + $1C
  sw16_r14h = sw16_regs + $1D

  r_15 = 15
  sw16_r15  = sw16_regs + $1e
  sw16_r15l = sw16_regs + $1e
  sw16_r15h = sw16_regs + $1f

  .macro begin_sw16
    jsr sw16
    .setcpu "sweet16"
  .endmacro

  .macro end_sw16
    rtn
    .pc02
  .endmacro

  .macro jump target
    .if (.cpu .bitand CPU_ISET_SWEET16) = 0
      .fatal "Must be in Sweet-16 mode to use the jump macro."
    .endif

    .byte $1F
    .byte <(target-1)
    .byte >(target-1)
  .endmacro

  .macro js target
    .if (.cpu .bitand CPU_ISET_SWEET16) = 0
      .fatal "Must be in Sweet-16 mode to use the js macro."
    .endif

    .byte $0D
    .byte <(target-1)
    .byte >(target-1)
  .endmacro

  .macro mov src,dst
    .if (.cpu .bitand CPU_ISET_SWEET16) = 0
      .fatal "Must be in Sweet-16 mode to use the mov macro."
    .endif

    .byte $0E
    .byte (src*16)+dst
  .endmacro

.endif
