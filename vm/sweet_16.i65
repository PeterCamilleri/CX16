; SWEET-16 - The APPLE-II Pseudo Machine Interpreter - Header File
; Copyright (C) 1977 APPLE COMPUTER, INC -- All  Rights Reserved
; S. WOZNIAK
; Original code courtesy of: http://www.6502.org/source/interpreters/sweet16.htm
; Ported to ca65 for the Commander X 16 project by Peter Camilleri

.ifndef sweet_16_included
sweet_16_included = 1
  .pushseg

  .ifndef CPU_ISET_SWEET16
    .macpack cpu
  .endif

  .ifdef sweet_16_main_included
    ; Definitions for sweet_16.a65 and its users.

    .zeropage
    sw16_regs:  .res 32      ; Allocate space for 16 16-bit registers.
    .exportzp sw16_regs

    sw16_asave: .res 1       ; Space to preserve the A register
    sw16_xsave: .res 1       ; Space to preserve the X register
    sw16_ysave: .res 1       ; Space to preserve the Y register
    sw16_psave: .res 1       ; Space to preserve the P register

    .macro sw16_save_all     ; Save all the registers to a buffer.
      sta sw16_asave
      stx sw16_xsave
      sty sw16_ysave
      php
      pla
      sta sw16_psave
    .endmacro

    .macro sw16_restore_all  ; Restore all registers from a buffer.
      lda sw16_psave
      pha
      lda sw16_asave
      ldx sw16_xsave
      ldy sw16_ysave
      plp
    .endmacro

    .export sw16
  .else
    ; Definitions for users of sweet_16.i65.
    .importzp sw16_regs
    .import sw16
  .endif

  ; Common definitions
  sw16_r0   = sw16_regs + $00
  sw16_r0l  = sw16_regs + $00
  sw16_r0h  = sw16_regs + $01

  sw16_r1   = sw16_regs + $02
  sw16_r1l  = sw16_regs + $02
  sw16_r1h  = sw16_regs + $03

  sw16_r2   = sw16_regs + $04
  sw16_r2l  = sw16_regs + $04
  sw16_r2h  = sw16_regs + $05

  sw16_r3   = sw16_regs + $06
  sw16_r3l  = sw16_regs + $06
  sw16_r3h  = sw16_regs + $07

  sw16_r4   = sw16_regs + $08
  sw16_r4l  = sw16_regs + $08
  sw16_r4h  = sw16_regs + $09

  sw16_r5   = sw16_regs + $0A
  sw16_r5l  = sw16_regs + $0A
  sw16_r5h  = sw16_regs + $0B

  sw16_r6   = sw16_regs + $0C
  sw16_r6l  = sw16_regs + $0C
  sw16_r6h  = sw16_regs + $0D

  sw16_r7   = sw16_regs + $0E
  sw16_r7l  = sw16_regs + $0E
  sw16_r7h  = sw16_regs + $0F

  sw16_r8   = sw16_regs + $10
  sw16_r8l  = sw16_regs + $10
  sw16_r8h  = sw16_regs + $11

  sw16_r9   = sw16_regs + $12
  sw16_r9l  = sw16_regs + $12
  sw16_r9h  = sw16_regs + $13

  sw16_r10  = sw16_regs + $14
  sw16_r10l = sw16_regs + $14
  sw16_r10h = sw16_regs + $15

  sw16_r11  = sw16_regs + $16
  sw16_r11l = sw16_regs + $16
  sw16_r11h = sw16_regs + $17

  sw16_r12  = sw16_regs + $18
  sw16_r12l = sw16_regs + $18
  sw16_r12h = sw16_regs + $19
  sw16_r12_offset = 12*2

  sw16_r13  = sw16_regs + $1A
  sw16_r13l = sw16_regs + $1A
  sw16_r13h = sw16_regs + $1B

  sw16_r14  = sw16_regs + $1C
  sw16_r14l = sw16_regs + $1C
  sw16_r14h = sw16_regs + $1D

  sw16_r15  = sw16_regs + $1e
  sw16_r15l = sw16_regs + $1e
  sw16_r15h = sw16_regs + $1f

  .macro begin_sw16
    jsr sw16
    .setcpu "sweet16"
  .endmacro

  .macro end_sw16
    rtn
    .pc02
  .endmacro

  .popseg
.else
  .ifdef sweet_16_main_included
    .fatal "Invalid include of both sweet_16.a65 and sweet_16.i65"
  .endif
.endif
