; Tests for the Sweet-16 ported to the Commander X 16

sw16_sim_support = 1

.include "test65.i65"
.include "../utilities/assist_16/set_16.i65"
.include "../utilities/assist_16/eql_16.i65"
.include "../vm/sweet_16.a65"
.include "../vm/sweet_16_test.i65"

.export _main
.pc02

.data

  sw16_stack: .res 20

.code
_main:

  begin_sw16
  set R12, sw16_stack+18
  set R0,$1234
  set R1,$5678
  end_sw16

  eql_16 sw16_r0,$1234
  fail_ne 10

  eql_16 sw16_r1,$5678
  fail_ne 11

  begin_sw16
  add R1
  end_sw16

  eql_16 sw16_r0,$68AC
  fail_ne 12

  eql_16 sw16_r1,$5678
  fail_ne 13

  begin_sw16
  sub R1
  end_sw16

  eql_16 sw16_r0,$1234
  fail_ne 14

  eql_16 sw16_r1,$5678
  fail_ne 15

  begin_sw16
  set R0,$0
  set R1,$1
  set R5,fib_table  ; R5 points to the expected values. $FFFF is end marker.

test_loop:
  bs fib

  ; Get the test value into R4
  st  R2
  ldd @R5
  bm1 fib_test_done
  st  R4
  ld  R2
  cpr R4
  sw16_fail_ne 20
  br  test_loop

fib_test_done:
  sw16_tests_pass
  end_sw16

  tests_fail 254

  .setcpu "sweet16"
fib:
  ; Swap R0 and R1
  st R2
  ld R1
  st R3
  ld R2
  st R1
  ld R3

  ; Add R1 to R0
  add R1
  rs
  .pc02

  tests_fail 255

fib_table:
  .word 1
  .word 1
  .word 2
  .word 3
  .word 5
  .word 8
  .word 13
  .word 21
  .word 34
  .word 55
  .word 89
  .word 144
  .word 233
  .word 377
  .word 610
  .word 987
  .word 1597
  .word 2584
  .word 4181
  .word 6765
  .word 10946
  .word 17711
  .word 28657
  .word 46368
  .word $FFFF
